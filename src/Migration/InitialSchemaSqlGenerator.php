<?php
namespace Orm\Migration;

class InitialSchemaSqlGenerator
{
    /**
     * Erzeugt ein vollständiges CREATE TABLE SQL-Skript aus dem Entity-Schema.
     * @param array $schema Das von EntitySchemaExtractor erzeugte Schema-Array
     * @return string SQL-Skript
     */
    public function generate(array $schema): string
    {
        $sql = "-- Initial schema generated by ORM\n";
        foreach ($schema as $table => $tableDef) {
            $sql .= $this->generateCreateTable($table, $tableDef['columns']) . "\n\n";
        }
        return $sql;
    }

    private function generateCreateTable(string $table, array $columns): string
    {
        $lines = [];
        $primaryKeys = [];
        $uniqueKeys = [];

        foreach ($columns as $name => $col) {
            $type = $this->phpTypeToSql($col['type']);
            $nullable = $col['nullable'] ? 'NULL' : 'NOT NULL';

            $line = "  `$name` $type $nullable";

            // AUTO_INCREMENT (nur sinnvoll für int/INTEGER)
            if (!empty($col['auto_increment']) && $col['auto_increment'] === true) {
                $line .= " AUTO_INCREMENT";
            }

            // DEFAULT-Wert
            if (array_key_exists('default', $col)) {
                $default = $col['default'];
                if ($default === null) {
                    $line .= " DEFAULT NULL";
                } elseif (is_string($default)) {
                    $line .= " DEFAULT '" . addslashes($default) . "'";
                } elseif (is_bool($default)) {
                    $line .= " DEFAULT " . ($default ? '1' : '0');
                } else {
                    $line .= " DEFAULT $default";
                }
            }

            $lines[] = $line;
            
            // PRIMARY KEY
            if (!empty($col['primary']) && $col['primary'] === true) {
                $primaryKeys[] = $name;
            }

            // UNIQUE
            if (!empty($col['unique']) && $col['unique'] === true) {
                $uniqueKeys[] = $name;
            }
        }
        
        if (!empty($primaryKeys)) {
            $lines[] = "  PRIMARY KEY (`" . implode('`,`', $primaryKeys) . "`)";
        }

        // UNIQUE-Constraints als einzelne Zeilen
        foreach ($uniqueKeys as $uniqueCol) {
            $lines[] = "  UNIQUE (`$uniqueCol`)";
        }
        
        $columnsSql = implode(",\n", $lines);
        return "CREATE TABLE `$table` (\n$columnsSql\n);";
    }

    /**
     * Übersetzt PHP-Typen in SQL-Typen (einfaches Mapping, ggf. anpassen!)
     */
    private function phpTypeToSql(string $phpType): string
    {
        return match($phpType) {
            'int', 'integer' => 'INTEGER',
            'string' => 'VARCHAR(255)',
            'float' => 'REAL',
            'bool', 'boolean' => 'BOOLEAN',
            default => 'TEXT',
        };
    }
}
